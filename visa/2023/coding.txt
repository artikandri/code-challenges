README
Free-Coding

Free-coding questions do not include any testing.
Language

JavaScript (Node.js v18.12.1)

Some best practices for Node.js

    You can use console.log(...) to print any data for debugging purposes.
    Use arrow functions () => {} and other ES2015 features to write concise and clear code.

The following libraries are available to be imported:

const async = require('async');
const axios = require('axios');
const chai = require('chai');
const chai_http = require('chai-http');
const co = require('co');
const connect = require('connect');
const crypto_js = require('crypto-js');
const _datastructures_js_priority_queue = require('@datastructures-js/priority-queue');
const _datastructures_js_binary_search_tree = require('@datastructures-js/binary-search-tree');
const debug = require('debug');
const express = require('express');
const forever = require('forever');
const futil = require('futil');
const http = require('http');
const ip_router = require('ip-router');
const ip_to_int = require('ip-to-int');
const ipaddr_js = require('ipaddr.js');
const jquery = require('jquery');
const lodash = require('lodash');
const mocha = require('mocha');
const mongodb = require('mongodb');
const mongoose = require('mongoose');
const mssql = require('mssql');
const mysql = require('mysql');
const mysql2 = require('mysql2');
const node_fetch = require('node-fetch');
const pg = require('pg');
const rambda = require('rambda');
const request = require('request');
const rxjs = require('rxjs');
const sequelize = require('sequelize');
const shelljs = require('shelljs');
const sys = require('sys');
const underscore = require('underscore');
const validator = require('validator');
const when = require('when');
const ws = require('ws');


// =========================================================================


// const debounce = (func, wait) => {
//     let timeout = 0; 
//     return function executeFunction(...args) {
//         const later = () => {
//             timeout = null; 
//             func(...args)
//         }
//         clearTimeout(timeout); 
//         timeout = setTimeout(later, wait); 
//     }
// }

// function a ()  {
//     console.log("test"); 
// }

// debounce(a, 100); 

//Write a function to check if a string is a palindrome.
//Example : "race car""race car"
function checkPalindrome (str) {
    if (typeof str !== "string") {
        console.log(false)
        return false; 
    } 
    if (!str.length) {
        console.log(false)
        return false; 
    }
    const cleaned = str.toLowerCase().split(" ").join("");
    const result = cleaned === [...cleaned].reverse().join("")
    return result;
}

/*
    1. Capital case
    2. Space 
    3. Symbols (;)
    4. check if string or not
    5. string length 
 */

checkPalindrome(null)

a, b 
a == b
a === b 

// // pseudo class
// adapter design 
// concept design 



